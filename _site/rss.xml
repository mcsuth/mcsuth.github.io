<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>Smith's Blog</title>
        <description>Smith's Blog - Smith Suth</description>
        <link>http://mcsuth.github.io</link>
        <link>http://mcsuth.github.io</link>
        <lastBuildDate>2014-11-06T16:40:42-08:00</lastBuildDate>
        <pubDate>2014-11-06T16:40:42-08:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>Strangular Angular</title>
                <description>
&lt;p&gt;It’s been a while since I’ve looked at my Ruby on Rails apps and wow, I hardly remember a thing. Thinking back at how it all began is rather funny. Till this day I’d have to say that I still don’t know what I’m doing, but I’m more comfortable with that. &lt;/p&gt;

&lt;p&gt;I’ve been working for less than a year as a developer after three months of informal training and dicking around with the console and I’m slowly coming to terms that I’m never going to know everything. Everyday somebody is going to create a new framework or library and things so out of style. &lt;/p&gt;

&lt;p&gt;That being said, I’ve been thinking about redoing my Ruby on Rails in Angular. &lt;/p&gt;

&lt;p&gt;As much as I enjoy Angular, I’m still having pains from it.&lt;/p&gt;

</description>
                <link>http://mcsuth.github.io/life/reflections/2014/10/22/strangular-angular</link>
                <guid>http://mcsuth.github.io/life/reflections/2014/10/22/strangular-angular</guid>
                <pubDate>2014-10-22T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>First Jekyll Post</title>
                <description>&lt;p&gt;Read &lt;a href=&quot;http://jekyllbootstrap.com/usage/jekyll-quick-start.html&quot;&gt;Jekyll Quick Start&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Complete usage and documentation available at: &lt;a href=&quot;http://jekyllbootstrap.com&quot;&gt;Jekyll Bootstrap&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;update-author-attributes&quot;&gt;Update Author Attributes&lt;/h2&gt;

&lt;p&gt;In &lt;code&gt;_config.yml&lt;/code&gt; remember to specify your own data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;title : My Blog =)

author :
  name : Name Lastname
  email : blah@email.test
  github : username
  twitter : username
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The theme should reference these variables whenever needed.&lt;/p&gt;

&lt;h2 id=&quot;sample-posts&quot;&gt;Sample Posts&lt;/h2&gt;

&lt;p&gt;This blog contains sample posts which help stage pages and blog data.
When you don’t need the samples anymore just delete the &lt;code&gt;_posts/core-samples&lt;/code&gt; folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rm -rf _posts/core-samples
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here’s a sample “posts list”.&lt;/p&gt;
</description>
                <link>http://mcsuth.github.io/2014/09/04/hola-world</link>
                <guid>http://mcsuth.github.io/2014/09/04/hola-world</guid>
                <pubDate>2014-09-04T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Recursive Ruby   Factorials</title>
                <description>
&lt;pre&gt;&lt;code&gt;def factorial(n)
  if n == 0
    1
  else
    n * factorial(n - 1)
  end
end

factorial(5) // 120
&lt;/code&gt;&lt;/pre&gt;
</description>
                <link>http://mcsuth.github.io/solution/2013/12/13/recursive-ruby---factorials</link>
                <guid>http://mcsuth.github.io/solution/2013/12/13/recursive-ruby---factorials</guid>
                <pubDate>2013-12-13T00:00:00-08:00</pubDate>
        </item>

        <item>
                <title>Week 5: General Assembly – WDI SF</title>
                <description>
&lt;p&gt;I definitely dropped the ball last weekend and forgot to write a blog post about my first project.&lt;/p&gt;

&lt;h4 id=&quot;project-1&quot;&gt;Project #1&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Solo Ruby on Rails project&lt;/li&gt;
  &lt;li&gt;Used APIs and Gems&lt;/li&gt;
  &lt;li&gt;Created multiple/associated models&lt;/li&gt;
  &lt;li&gt;Incorporated user authentication&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Website: &lt;a href=&quot;http://sentivestor.herokuapp.com&quot;&gt;sentivestor.herokuapp.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[gallery type=”square” ids=”364,366,365”]&lt;/p&gt;

&lt;p&gt;My first project revolved around the notion of Behavioral Economics/Finance. Initially, I wanted to create a web application that allowed users to have free range of the website, search for a stock symbol, and then see a breakdown of recent tweets and its sentiment analysis. In addition to the sentiment analysis, I wanted users to be able to view the geographical location of the tweets. If I created this web application I would have had to only use 2-3 APIs (one for “grabbing” the tweets, one to perform sentiment analysis on the tweet, and another to use a map) and JavaScript to render the sentiment charts and map. This didn’t pan out exactly the way I wanted it to.&lt;/p&gt;

&lt;h4 id=&quot;saturday&quot;&gt;Saturday&lt;/h4&gt;

&lt;p&gt;I devoted a few hours on Saturday to outline my schema and conceptualize the layout of the application.&lt;/p&gt;

&lt;h4 id=&quot;sunday&quot;&gt;Sunday&lt;/h4&gt;

&lt;p&gt;On Sunday, I spent a few hours collecting all the APIs/Gems I would/might use, read documentation, and atempted to get the Twitter API to work. Unfortunately, I freaked out real fast after I reached the Twitter API request limit and stopped all work. This happened after I requested to retrieve all Tweets that contained @AAPL…&lt;/p&gt;

&lt;h4 id=&quot;monday&quot;&gt;Monday&lt;/h4&gt;

&lt;p&gt;By the end of the day on Monday I was able to successfully request from my APIs and they were fully functional. I learned that the Twitter API does not provide geolocation. So my idea of displaying a may to view sentiment trends was out of the window.&lt;/p&gt;

&lt;h4 id=&quot;tuesday&quot;&gt;Tuesday&lt;/h4&gt;

&lt;p&gt;Since my idea of including a map was out, my instructor suggested that I create user authentication and then allow users to save symbols for future viewing. So, I created a User model to have a log-in/sign-up feature. For some odd reason it took me 4-5 tries to get the user authentication to work so it took me the whole day to do it.&lt;/p&gt;

&lt;h4 id=&quot;wednesday&quot;&gt;Wednesday&lt;/h4&gt;

&lt;p&gt;On Wednesday, I worked on creating another model to allow users to save symbols. This functionality took me a longer time to do as well.&lt;/p&gt;

&lt;h4 id=&quot;thursday&quot;&gt;Thursday&lt;/h4&gt;

&lt;p&gt;The day before the presentation I styled my project a few times. Broke my stuff. Put it up on Heroku.&lt;/p&gt;

&lt;h4 id=&quot;friday---presentation-day&quot;&gt;Friday - Presentation day!:&lt;/h4&gt;
&lt;p&gt;Wow, I was blown away by all the amazing projects! After presentations our instructors presented us with a General Assembly book-bag and shots of tequila, whiskey, and champagne. This was followed by  a few hours of bowling with food and more beer.&lt;/p&gt;

&lt;p&gt;[gallery type=”square” ids=”369,370,372”]&lt;/p&gt;
</description>
                <link>http://mcsuth.github.io/2013/11/01/week-5-general-assembly--wdi-sf</link>
                <guid>http://mcsuth.github.io/2013/11/01/week-5-general-assembly--wdi-sf</guid>
                <pubDate>2013-11-01T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Week 4: General Assembly   WDI SF (Yammer)</title>
                <description>
&lt;p&gt;This week was kicked off with a visit to Yammer. Their engineers spoke to us about their backgrounds, how they got into programming, and their day-to-day schedules. It was fantastic to learn that a large percentage of Yammer’s engineers did not come from a traditional Computer Science background. The engineers that we spoke to really emphasized the importance of curiosity, patience, and perseverance when it comes to programming. They were really humble and confessed that even though they all had many years of experience in programming everyday is like a roller coaster - 50% of the time they felt like gods, but the other 50% of the time they felt like idiots.&lt;/p&gt;

&lt;p&gt;When we finished the visit we headed back to the office to do some more work. We continued with Ruby on Rails. One of our projects was to create a gallery application that allows users to add artists and paintings to an online gallery. In addition to that, we had to write RSPEC testing, include user authentication , and style it with Bootstrap. This project required ~3 controllers and ~2 models.&lt;/p&gt;

&lt;p&gt;Writing RSPEC testing proved to be difficult for me. At first, I was not keen on the idea of writing tests before writing my code because its cumbersome and time consuming. But the idea behind writing RSPEC is great because it make you write shorter and cleaner code. I, unfortunately, need to practice more on RSPEC.&lt;/p&gt;

&lt;p&gt;User authentication was a long process as well. I don’t really have much to say about it because I got the functionality to work, but it took my classmates and me a long time to get it.&lt;/p&gt;

&lt;p&gt;Bootstrap was a fail for me. I was working on my code while my instructor was lecturing on Bootstrap. I caught up and was able to install the bootstrap gem in my Rails application, but there’s just something about Bootstrap that’s not satisfying. I felt like all I was doing was copying and pasting. With Bootstrap, I managed to change the look of my buttons and added padding and margin to the text, but I ended up styling the shit out of my application and made it media responsive with good-old-fashion CSS3. I love CSS3 - so much functionality. Below are some screen shots of my final product.&lt;/p&gt;

&lt;p&gt;On Friday, we were told to commence with our first project. My project info to come in the next post! :)&lt;/p&gt;
</description>
                <link>http://mcsuth.github.io/2013/10/20/week-4-general-assembly---wdi-sf-yammer</link>
                <guid>http://mcsuth.github.io/2013/10/20/week-4-general-assembly---wdi-sf-yammer</guid>
                <pubDate>2013-10-20T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Week 3: General Assembly – WDI SF (The Long Weekend)</title>
                <description>
&lt;h4 id=&quot;the-week&quot;&gt;The Week&lt;/h4&gt;
&lt;p&gt;Week three was all about databases and Ruby on Rails. We delved into Rails after creating apps with Sinatra, and I’d have to say that Sinatra is extremely light in comparison to Rails. The process of generating your model(s) and your controller(s) with Rails is like magic. However, keeping track of what’s going on in each .rb and .html.erb file is pretty insane. One of the labs we had was to re-create &lt;a href=&quot;https://bitly.com/&quot;&gt;Bitly&lt;/a&gt;. We were told to approach the project via &lt;a href=&quot;http://en.wikipedia.org/wiki/Representational_state_transfer&quot;&gt;RESTful&lt;/a&gt; routing and so I jangled my way up to the point where I had no idea how to route my new url to the specified website.&lt;/p&gt;

&lt;center style=&quot;margin: 20px 0 20px 0&quot;&gt;
  &lt;a href=&quot;http://mcsuth.files.wordpress.com/2013/10/screen-shot-2013-10-14-at-12-13-02-pm.png&quot;&gt;
    &lt;img class=&quot;size-medium wp-image-326 aligncenter&quot; alt=&quot;Screen Shot 2013-10-14 at 12.13.02 PM&quot; src=&quot;http://mcsuth.files.wordpress.com/2013/10/screen-shot-2013-10-14-at-12-13-02-pm.png?w=300&quot; width=&quot;300&quot; height=&quot;148&quot; /&gt;
  &lt;/a&gt;
&lt;/center&gt;

&lt;p&gt;And oh, the power of C.R.A.P (Contrast, Repetition, Alignment, Proximity) design. After three weeks, I’ve noticed that my front-end designing revolves heavily on centering. :-P&lt;/p&gt;

&lt;h4 id=&quot;the-weekend&quot;&gt;The Weekend&lt;/h4&gt;
&lt;p&gt;On a more restful note, I went to the Twin Peaks, the Golden Gate Park, and the beach on Saturday. I walked along the coast and ventured onto a tiny trail around the beach. After coding all day on Sunday, I went to &lt;a href=&quot;http://eltechosf.com/&quot;&gt;El Techo de Lolinda&lt;/a&gt; in the Mission, followed by movies at the Sundance Kabuki cinema.&lt;/p&gt;
</description>
                <link>http://mcsuth.github.io/2013/10/15/week-3-general-assembly--wdi-sf-the-long-weekend</link>
                <guid>http://mcsuth.github.io/2013/10/15/week-3-general-assembly--wdi-sf-the-long-weekend</guid>
                <pubDate>2013-10-15T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Week 2.25: General Assembly – WDI SF</title>
                <description>
&lt;p&gt;On Tuesday I created a “To Do List” web application. I designed it such that it is responsive to the size of the screen that the application is in. The app was called “Operation Get Shit Done”. It was built via HTML5, CSS3, Javascript, jQuery, and Sinatra. When you add items in the input then entry will add to the “Operation Get Shit Done” list. Once you check off the checkbox the item will fadeOut and fadeIn under the “You Done With This Shit” list.&lt;/p&gt;

&lt;p&gt;How ironic was is to create a “To Do List” app because I have no many things that I want to refactor.&lt;/p&gt;
</description>
                <link>http://mcsuth.github.io/2013/10/10/week-225-general-assembly--wdi-sf</link>
                <guid>http://mcsuth.github.io/2013/10/10/week-225-general-assembly--wdi-sf</guid>
                <pubDate>2013-10-10T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Week 2: General Assembly – WDI SF</title>
                <description>
&lt;p&gt;Cue in Beyonce’s song &lt;a href=&quot;http://youtu.be/JlxByc0-V40&quot;&gt;“Sweet Dreams”&lt;/a&gt; because I’m dreaming about my code. Just recently (as in last night), I found myself recovering from downing too many shots and waking up thinking about an app that I created in class. I realized that I didn’t write anything to validate the user’s input. Woops… Another thing to do over the long weekend.&lt;/p&gt;

&lt;h4 id=&quot;re-re-cap-of-last-week&quot;&gt;Re-Re-Cap of Last Week&lt;/h4&gt;
&lt;p&gt;I forgot to mention all of the embarrassing things that happened to me during the first week. On the first day of class I ran straight into the glass door. Luckily, the door opens both ways so it wasn’t a horrible scene. Then, two days later, I spilled a cup of coffee all over the table. It was a hot mess!&lt;/p&gt;

&lt;h4 id=&quot;projects&quot;&gt;Projects&lt;/h4&gt;
&lt;p&gt;The first week was all about reviewing and reacquainting the students with languages. We created games that were played in the terminal, but the second week was the fun stuff. We began using Sinatra to put our projects into the browser. This new stage was a punch in my face because I realized that I’m stuck in the 90’s when it comes to designing with tables. What can I say? I love tables and all things square.&lt;/p&gt;

&lt;p&gt;What I enjoy about this program is the progression of the projects. We initially started out creating interactive projects with Ruby in the terminal (via pry and irb). Then, we learned how to display it within our browser via Sinatra. Once we had a handle on that, we began to incorporate APIs and Json with our Ruby and Sinatra web app. A few days later, we’d redo one of our initial projects in Javascipt, jQuery, and Ajax.&lt;/p&gt;

&lt;p&gt;Now, I enjoy the progression (so far), but it is by no means easy for me. I’ve spent many days in the last 2.5 weeks not sleeping, and if I was sleeping I would be dreaming.&lt;/p&gt;
</description>
                <link>http://mcsuth.github.io/2013/09/30/week-2-general-assembly--wdi-sf</link>
                <guid>http://mcsuth.github.io/2013/09/30/week-2-general-assembly--wdi-sf</guid>
                <pubDate>2013-09-30T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Week 1: General Assembly WDI SF</title>
                <description>
&lt;p&gt;I just completed my first week of General Assembly’s Web Development Immersive program and I feel like I’ve been sitting with my classmates for months! Where to start?&lt;/p&gt;

&lt;h4 id=&quot;about-general-assembly-wdi&quot;&gt;About General Assembly WDI&lt;/h4&gt;

&lt;p&gt;General Assembly’s Web Development Immersive (“WDI”) program is a 3-month coding program. One learns Ruby, Ruby on Rails, Sinatra, JavaScript, HTML5, CSS3, JSON, and some more stuff that involves to many acronyms and numbers that I don’t remember.&lt;/p&gt;

&lt;h4 id=&quot;pre-work&quot;&gt;Pre-Work&lt;/h4&gt;

&lt;p&gt;Before starting the program I had to complete some pre-work on Ruby, Git, HTML, and CSS. The HTML and CSS were great to refresh because I haven’t touched those things is years! Git was completely foreign to me, and Ruby was similar to JavaScript in terms of its functions/methods and classes.&lt;/p&gt;

&lt;h4 id=&quot;week-1&quot;&gt;Week 1&lt;/h4&gt;

&lt;p&gt;My first week was very interesting. After being out of college for a year and not doing anything remotely similar to coding/programming in years it was a very difficult transition for me to plummet into the program.&lt;/p&gt;

&lt;h4 id=&quot;terminal-and-github&quot;&gt;Terminal and GitHub&lt;/h4&gt;
&lt;p&gt;On the first day we went over some basic terminal and git commands. Learning how to navigate through the terminal was a bit scary for me. The laptop that I use isn’t mine so I was thoroughly irked out with using the terminal to create and delete things. GitHub was also very alien to me. I have never used GitHub for anything in my entire life! The concept of having to work locally, then adding/commiting/pushing my local files to a repository (“reopo”), and the  requesting for a pull for my instructors to merge my files in my repo to theirs’ was interesting to grasp at first. However, after using the terminal and GitHub for a good solid 3.75 days… I became completely comfortable with the terminal and I can sort of say that I GET GIT (I think)! On Friday (9/27) I was able to help my classmates with their Git problems! Am I a Git pro now? Just kidding.&lt;/p&gt;

&lt;p&gt;An important command that really helped me out was: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  find . -name .DS_Store -print0 | xargs -0 git rm --ignore-unmatch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One of the silliest problems that I have with Git is the over creation of &lt;strong&gt;.ds&lt;/strong&gt; files in my repo. Using the above removes all &lt;strong&gt;.ds&lt;/strong&gt; files so I can properly add, commit, and push my new files.&lt;/p&gt;

&lt;h4 id=&quot;ruby&quot;&gt;Ruby&lt;/h4&gt;
&lt;p&gt;As I mentioned previously, I’ve never seen, touched, or tasted Ruby… ever. The only exposure that I had with the language was with the pre-work. When we reviewed some basics on the first day I was like: Yeah, my life is nice and randy dandy. However, when we began to work on methods/functions and it’s scoping properties, I felt so silly. I felt like I was a second year Spanish student amongst people who’ve lived in Spain for 6 months and is now fluent. I also realized that I don’t think like a coder yet. When I approach a project, I think backwards. I’m not quite sure if that’s good, but I tend to get really stuck on a solution because I tend to over think about how the outcome should be.&lt;/p&gt;

&lt;h4 id=&quot;week-1-weekend&quot;&gt;Week 1 Weekend&lt;/h4&gt;
&lt;p&gt;On Saturday I headed over to class for a review session. I ended up sitting with a few of my classmates in a separate lab space to work on my own project. The hardest part about learning something on my own is focusing at one thing at a time. I’m the type of person who is like: Ok, I just learned something. Give me some time for me to play with it. Wait, something new? Hold on. I want to learn the new thing now!… I think I just get way to excited.&lt;/p&gt;
</description>
                <link>http://mcsuth.github.io/2013/09/29/week-1-general-assembly---wdi-sf</link>
                <guid>http://mcsuth.github.io/2013/09/29/week-1-general-assembly---wdi-sf</guid>
                <pubDate>2013-09-29T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>San Fran Living</title>
                <description>
&lt;p&gt;I’ve been living in San Francisco for about 21 days so far and I like it. The neighborhoods are rich with culture and very vibrant. What I find even more enthralling is the overall jovial demeanor of the people. Perhaps it’s because I’ve been encountering individuals outside of the Financial District… Maybe it’s the weather.&lt;/p&gt;

&lt;p&gt;My story of coming to San Francisco, I think, is pretty normal. Long story short, I relocated from Boston to San Francisco after reaching a quarter-life crisis. At one point, I considered joining the military. For a good three years of my short life I really wanted to fly and piloting an F-14 had once been a dream of mine. I planned on entering the Air Force after high school, but then I was peer-pressured into applying to college… Everybody was doing it and I guess I had to as well. After college I contemplated about joining the Navy. Oh boy, to be on a carrier with a deck pitching as high as 30 feet every minute - fantastic (https://www.youtube.com/watch?v=4gGMI8d3vLs)!&lt;/p&gt;

&lt;p&gt;Operation “Join the Navy” began in March 2013. I covered spatial apperception, basic mechanical/thermal/electrical physics, GRE/GMAT Mathematics, and basic reading comprehension. In conjunction with the mental acrobatics, I went through a regimented physical schedule. It was a blast (not really). The culmination of this Naval preparation ended with a big nothing. I chickened out because I didn’t want to be a quitter (ironic?). It was either join the Navy forever or never for me. I wasn’t ready to make that commitment (the officer cutoff age is ~27 so I have some time to mull it over).&lt;/p&gt;

&lt;p&gt;Since the military idea was out of the picture, I decided to quit my job and move to San Francisco.&lt;/p&gt;
</description>
                <link>http://mcsuth.github.io/2013/09/21/san-fran-living</link>
                <guid>http://mcsuth.github.io/2013/09/21/san-fran-living</guid>
                <pubDate>2013-09-21T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Longest Word</title>
                <description>
&lt;h5 id=&quot;initial-though-process&quot;&gt;Initial Though Process:&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;em&gt;Split&lt;/em&gt;&lt;/strong&gt; the string into a new array&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;em&gt;Loop&lt;/em&gt;&lt;/strong&gt; the new array and find the &lt;strong&gt;&lt;em&gt;length&lt;/em&gt;&lt;/strong&gt; of each element&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create an &lt;strong&gt;&lt;em&gt;if&lt;/em&gt;&lt;/strong&gt; statement that returns the longest element&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, I kept on getting lost between step 2 and three. I had set up the if statement, but I didn’t really know where to go with comparing the lengths of each element. I ended up googling for examples and saw that others created var longest = 0 and var word = null so that they can perform some substitution.&lt;/p&gt;

&lt;h5 id=&quot;new-thought-process&quot;&gt;New Thought Process:&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Split the string into a new array&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create 2 variables (ie. var1, var2… in my case I used longest, word)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Loop the new array and find the length of each element&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create an if statement within the loop that executes if var1 (which is set to 0) is less than the length of the elements in the new array.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Because var1 was given the value of 0, each element within the new array will be tested against the condition: var1 &amp;lt; length of element in new array.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create substitutions so that each element will be compared with each other.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;basically-this-is-what-happens&quot;&gt;Basically, this is what happens:&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;var1 = 0;   
if var1 &amp;amp;lt; newArray&#39;s element&#39;s length, then substitute:   
var1 = newArray&#39;s element&#39;s length and var2 = newArray&#39;s element   
Round 1) var1 (value of zero) &amp;amp;lt; 1 (length of &quot;I&quot;) so substitute...   
var1 = 1 (length of &quot;I&quot;) and var2 = &quot;I&quot;   
Round 2) var1 (value of 1 from &quot;I&quot;) &amp;amp;lt; 4 (length of &quot;love&quot;) so substitute...   
var1 = 4 (length of &quot;love&quot;) and var2 = &quot;love&quot;   
Round 3) var1 (value of 4 from &quot;love&quot;) &amp;amp;lt; 6 (length of &quot;eating&quot;) so substitute... 
var1 = 6 (length of &quot;eating&quot;) and var2=&quot;eating&quot;   
Round 4) var 1 (length of 6 from &quot;eating&quot;) &amp;amp;lt; 4 (length of &quot;rice&quot;)... NOT TRUE SO STOP HERE   
Round 5) return the value of var2 // &quot;eating&quot;


var sen = &quot;I love eating rice.&quot;;
function longestWord(input) {
	var newArray = input.split(&quot; &quot;);
	var var1 = 0;
	var var2 = &quot;&quot;;
	for (var i = 0; i &amp;amp;lt; newArray.length; i++) {
		if (var1 &amp;amp;lt; newArray[i].length) {
			var1 = newArray[i].length;
			var2 = newArray[i];
		}
	}
		return (var2 &amp;lt;del&amp;gt;+&quot;:&quot;+var2.length&amp;lt;/del&amp;gt;);
}
longestWord(sen);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This worked for me. The crossed out sections are superfluous, but I like to see my steps.&lt;/p&gt;
</description>
                <link>http://mcsuth.github.io/2013/09/21/longest-word</link>
                <guid>http://mcsuth.github.io/2013/09/21/longest-word</guid>
                <pubDate>2013-09-21T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Code School: JavaScript Part 2 - 1.7</title>
                <description>
&lt;pre&gt;&lt;code&gt;var currentGen = 1;
var totalGen = 19;
var totalMW = 0;

while (currentGen &amp;amp;lt;= 4) {
  var megaWatts = 62;
  var totalMW = totalMW + megaWatts;
  console.log(&quot;Generator #&quot; + currentGen + &quot; is on, adding &quot; + megaWatts + &quot; MW, for a total of &quot; + totalMW + &quot; MW!&quot;);
  currentGen ++;
}

for(var nextGen = currentGen; nextGen &amp;amp;lt;= totalGen; nextGen++) {
  var megaWatts = 124;
  var totalMW = totalMW + megaWatts;
  console.log(&quot;Generator #&quot; + nextGen + &quot; is on, adding &quot; + megaWatts + &quot; MW, for a total of &quot; + totalMW + &quot; MW!&quot;);
}
&lt;/code&gt;&lt;/pre&gt;
</description>
                <link>http://mcsuth.github.io/2013/09/18/code-school-javascript-part-2---17</link>
                <guid>http://mcsuth.github.io/2013/09/18/code-school-javascript-part-2---17</guid>
                <pubDate>2013-09-18T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Tech Vocab</title>
                <description>
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Client&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Clients are computers that are indirectly connected to the Internet through an Internet Service Provider (&quot;ISP&quot;).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Server&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A server is a special computer connected directly to the Internet.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Browser&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A browser is a software suite that is used to interpret webpages, images, videos, etc...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;IP Address&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;An IP Address (Internet Protocol Address) is a set of numbers, much like a phone number or postal number, that helps computers ind each other. We end up giving them names, or domains.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;DNS&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A DNS, or Domain Name System, a network/internet service that translates domain names into IP Addresses.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Front End&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Font End Developing is development that focuses on user interfaces. The languages involved for this type of development includes HTML, CSS, JavaScript, and jQuery.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Back End&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Back End Developing in development that focuses on the server side of programs. The languages involved for this type of development includes Node.JS, Ruby on Rails, Python, and more,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Database&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A database is a collection of information that is organized in such a way that allows for fast retrieval.
&lt;/code&gt;&lt;/pre&gt;
</description>
                <link>http://mcsuth.github.io/2013/09/13/tech-vocab</link>
                <guid>http://mcsuth.github.io/2013/09/13/tech-vocab</guid>
                <pubDate>2013-09-13T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Interwebz, How You Doin' That?</title>
                <description>
&lt;p&gt;What happens when you go to a website? Interesting question. One would suppose that unicorn rainbow farts and fireworks happens inside your computer and then the website appears. Then, more satanic dark things happen when you decide to go to Google.com and search something. Unfortunately, more simpler things happen.&lt;/p&gt;

&lt;p&gt;First things first, things to know before explaining how the Internet works:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;strong&gt;&lt;em&gt;internet&lt;/em&gt;&lt;/strong&gt; is essentially a wire.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;em&gt;Servers&lt;/em&gt;&lt;/strong&gt; are computers that store webpage files. These computers are connected &lt;em&gt;directly&lt;/em&gt; to the internet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Each server has a designated and unique IP address. This is similar to a phone number, but we give them a website name, or domain.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Our personal computers are not servers because they aren’t directly connected to the internet. Our personal computers are called clients and are connected &lt;strong&gt;&lt;em&gt;indirectly&lt;/em&gt;&lt;/strong&gt; to the internet via and internet service provider (“ISP”).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;going-to-a-website&quot;&gt;Going to a website:&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;When you turn on your computer and open your browser and type in &lt;em&gt;google&lt;/em&gt;.com, what happens on your computer? Well, the first thing that happens is your computer goes through an ISP, which indirectly connects you to the Internet. And as stated above, servers that hold data, files, and webpages are directly connected to the Internet. So, the ISP connects with the Internet and then with the server that holds &lt;em&gt;google&lt;/em&gt;.com. &lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;emailing-gmail-to-yahoo&quot;&gt;Emailing (Gmail to Yahoo):&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;Your computer connects to the Internet via an IPS, which then connects you to the Gmail servers so you can compose an email. When you press the &lt;strong&gt;&lt;em&gt;send&lt;/em&gt;&lt;/strong&gt; button your email is squashed into a data package and the Gmail servers route it to the Yahoo servers. When your friend opens up her Yahoo email her computer connected via an IPS to the Internet and then to the Yahoo servers to retreive the email that you sent.&lt;/li&gt;
&lt;/ol&gt;
</description>
                <link>http://mcsuth.github.io/2013/09/13/interwebz-how-you-doin-that</link>
                <guid>http://mcsuth.github.io/2013/09/13/interwebz-how-you-doin-that</guid>
                <pubDate>2013-09-13T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Letter Changes</title>
                <description>
&lt;p&gt;Using the JavaScript language, have the function LetterChanges(str) take the str parameter being passed and modify it using the following algorithm. Replace every letter in the string with the letter following it in the alphabet (ie. c becomes d, z becomes a). Then capitalize every vowel in this new string (a, e, i, o, u) and finally return this modified string.&lt;/p&gt;

  	string = “Test.”;
  	function letterChange(string) {
&lt;pre&gt;&lt;code&gt;  var newArray = string.split(&quot;&quot;);
  var lowerCase = &quot;abcdefghijklmnopqrstuvwxyz&quot;.split(&quot;&quot;);
  var capital = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;.split(&quot;&quot;);
  var holder = &quot;&quot;;
  for (var i = 0; i &amp;amp;lt; newArray.length; i++) {
    for (var k = 0 ; k &amp;amp;lt; capital.length; k ++) {
      if (newArray[i] === capital[k]) {
        //console.log(newArray[i]+&quot;--&amp;amp;gt;&quot;+capital[k-1]);
        x = capital[k-1];
        console.log(x);
      }
    }
    for (var j = 0 ; j &amp;amp;lt; lowerCase.length; j ++) {
      if (newArray[i] === lowerCase[j]) {
        //console.log(newArray[i]+&quot;--&amp;amp;gt;&quot;+lowerCase[j-1]);
        y = lowerCase[j-1];
        console.log(y);
      }
    }
  }
}
letterChange(string);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will continue later. I’m off to NYC for the weekend!&lt;/p&gt;
</description>
                <link>http://mcsuth.github.io/2013/08/23/letter-changes</link>
                <guid>http://mcsuth.github.io/2013/08/23/letter-changes</guid>
                <pubDate>2013-08-23T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>First Factorial</title>
                <description>
&lt;pre&gt;&lt;code&gt;function myFactorial(input) {
  if (input === 0) {
    return (1);
  } else {
  return (input * myFactorial(input - 1));
  }
};
myFactorial(4);     // 24
&lt;/code&gt;&lt;/pre&gt;
</description>
                <link>http://mcsuth.github.io/solution/2013/08/20/first-factorial</link>
                <guid>http://mcsuth.github.io/solution/2013/08/20/first-factorial</guid>
                <pubDate>2013-08-20T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Substring, Substr, Slice</title>
                <description>
&lt;p&gt;Alright JavaScript, why must you have 3 methods that perform similar if not the same thing?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Substring&lt;/li&gt;
  &lt;li&gt;Substr&lt;/li&gt;
  &lt;li&gt;Slice&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This guys does a pretty good job at explaining the nuances of each method: &lt;a href=&quot;http://www.jacklmoore.com/notes/substring-substr-slice-javascript/&quot;&gt;jacklmoore.com/notes/substring-substr-slice-javascript/&lt;/a&gt;&lt;/p&gt;
</description>
                <link>http://mcsuth.github.io/information/2013/08/19/substring-substr-slice</link>
                <guid>http://mcsuth.github.io/information/2013/08/19/substring-substr-slice</guid>
                <pubDate>2013-08-19T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Southeast Asian Water Festival</title>
                <description>
&lt;p&gt;I attended the Annual Southeast Asian Water festival with the mom. It has been a while since I’ve gone to the festival and I figured that I might as well go since it might be my last. Also, I was trying to do everything in my power to delay telling my parents about my move to San Francisco.&lt;/p&gt;

&lt;p&gt;Long story short: I told my parents. Mission impossible was actually possible…&lt;/p&gt;
</description>
                <link>http://mcsuth.github.io/life/2013/08/17/southeast-asian-water-festival</link>
                <guid>http://mcsuth.github.io/life/2013/08/17/southeast-asian-water-festival</guid>
                <pubDate>2013-08-17T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Last Day of Work in Boston</title>
                <description>
&lt;p&gt;Today is officially my last day at BII. I’m ready for something new. I have no idea what San Francisco holds for me, but all I know is that relocating from Boston to San Francisco with no concrete plan and a few quarters in my pocket is a huge risk that I will be undertaking. I understand the risks, but you know what they say: Big Risk = Big Reward… or was it Big Loss…?&lt;/p&gt;
</description>
                <link>http://mcsuth.github.io/life/2013/08/15/last-day-of-work-in-boston</link>
                <guid>http://mcsuth.github.io/life/2013/08/15/last-day-of-work-in-boston</guid>
                <pubDate>2013-08-15T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>First Reverse</title>
                <description>
&lt;pre&gt;&lt;code&gt;var myString = &quot;I will tell you that my name is Smith.&quot;;
function myFunction(input) {
  x = input.split(&quot;&quot;);
  y = x.reverse();
  return (y.join(&quot;&quot;));
}
console.log (myFunction(myString));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Explanation&amp;lt;&lt;/em&gt;&lt;/strong&gt; &lt;br /&gt;
You cannot simply reverse a string by implementing the &lt;strong&gt;reverse()&lt;/strong&gt;* method as if it were an array. You can split each letter and space in the string such that they become separate elements, then you can reverse each element, and finally you can join the elements to form a new string.&lt;/p&gt;
</description>
                <link>http://mcsuth.github.io/2013/08/13/first-reverse</link>
                <guid>http://mcsuth.github.io/2013/08/13/first-reverse</guid>
                <pubDate>2013-08-13T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Work and the Stress</title>
                <description>
&lt;p&gt;I’m excited to be finishing up with my job this week as I will have free time to devote to studying before I move myself across the country. As of right now, I find it extremely difficult to allocate some time to devote to my personal project because of everyday life. My only free time is the weekend, but I always end up getting some sort of distraction. I.E. My mother likes to visit me and sleep for hours at my place… If there aren’t distractions, I end up getting allergies of some sort or something! I.E. I’ve got allergies right now!&lt;/p&gt;

&lt;p&gt;Ah yes, allergies. Yesterday I devoted the day to cleaning and pre-packing my life away. I guess I stirred up all the dust in my room and now I’ve got the runny nose and congestion like non other.&lt;/p&gt;

&lt;p&gt;Other stressors in my life: How to break the news to the family that I’m moving and how to see all of my close friends before I move.&lt;/p&gt;

&lt;p&gt;So much to do, but so little time! I guess I like to operate like this. If things don’t get done with a bang, then things won’t get done.&lt;/p&gt;

&lt;p&gt;Peace, foolios!&lt;/p&gt;
</description>
                <link>http://mcsuth.github.io/life/2013/08/11/work-and-the-stress</link>
                <guid>http://mcsuth.github.io/life/2013/08/11/work-and-the-stress</guid>
                <pubDate>2013-08-11T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Hello World</title>
                <description>
&lt;p&gt;Hi Y’all,&lt;/p&gt;

&lt;p&gt;I just registered a domain in pursuit of starting my portfolio. When I registered the domain and began writing my website, I began to get nervous about my time constraints. Right now I’m following an individual who is creating a JavaScript website every day. It’s crazy and fantastic. However, how does she find the time to do it?&lt;/p&gt;

&lt;p&gt;I can’t wait for the last day of my job because I will be able to devote time to study before I leave to San Fran at the end of August.&lt;/p&gt;

&lt;p&gt;Stay tuned y’all. Things are going to happen.&lt;/p&gt;
</description>
                <link>http://mcsuth.github.io/life/2013/07/25/hello-world</link>
                <guid>http://mcsuth.github.io/life/2013/07/25/hello-world</guid>
                <pubDate>2013-07-25T00:00:00-07:00</pubDate>
        </item>


</channel>
</rss>
